qt(.975, 8)
qt(.975,18)
qt(.95, 16)
qt(.95, 8)
?qt
qt(.975, 8)
pooledVariance <- function(v, n, sq.root = FALSE){
res <- sum((n-1)*v)/(sum(n) - 2)
if (sq.root) {
return(sqrt(res))
}
return(res)
}
confintPool <- function(m, v, n){
spool <- pooledVariance(v, n, T)
res <- m + c(-1, 1)*spool*qt(0.975, sum(n)-2)*sqrt(sum(1/n))
return(res)
}
qt(.975, 16)
2*sqrt(18)/qt(.975, 16)
qt(.975, 8)
2*3/qt(.975, 8)
2*3/qt(.975, 8)
nstall.packages("shiny")
install.packages("shiny")
library(shiny)
setwd("C:/Users/Fan/R/DataSci/09. Developing Data Products")
shiny::runApp('CourseProject')
shiny::runApp('CourseProject')
shiny::runApp('CourseProject')
shiny::runApp('CourseProject')
shiny::runApp('CourseProject')
shiny::runApp('CourseProject')
shiny::runApp('CourseProject')
shiny::runApp('CourseProject')
deployApp()
library(shinyapps)
deployApp()
setwd("C:/Users/Fan/R/DataSci/09. Developing Data Products/CourseProject")
setwd("C:/Users/Fan/R/DataSci/09. Developing Data Products/CourseProject")
deployApp()
shiny::runApp()
?get_map
shiny::runApp()
which(boston$TOWN=="Milton
")
which(boston$TOWN=="Milton")
# From here, start to use boston_rev.csv file
boston <- read.csv("data/boston_rev.csv")
boston$TRACT <- as.factor(boston$TRACT)
boston$CHAS <- as.factor(boston$CHAS)
which(boston$TOWN=="Milton")
which(boston$TOWN=="Milton")[1]
which(boston$TOWN=="Milton")[3]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
boston <- read.csv("boston_rev.csv")
boston <- read.csv("data/boston_rev.csv")
boston$TRACT <- as.factor(boston$TRACT)
boston$CHAS <- as.factor(boston$CHAS)
county.town <- read.csv("CourseProject/data/ma_municipalities.csv", stringsAsFactors=FALSE)
county.town <- read.csv("../CourseProject/data/ma_municipalities.csv", stringsAsFactors=FALSE)
rownames(county.town) <- county.town$Municipality
head(county.town)
county.town["Woburn", ]
head(county.town$County[boston$TOWN])
county.town[boston$TOWN, "County"]
county.town$Coounty["Woburn"]
county.town$Coounty
county.town$County["Woburn"]
county.town$County[1]
names(county.town$County)
colname(county.town)
rownames(county.town)
county.town["Woburn", ]
county.town["Woburn", "County"]
boston <- cbind(COUNTY=county.town[boston$TOWN, "County"], boston)
head(boston)
subset(boston, TOWN=="Woburn")
county.town <- read.csv("../CourseProject/data/ma_municipalities.csv", stringsAsFactors=FALSE)
dim(county.town)
dim(county.town[boston$TOWN, "County"])
length(county.town[boston$TOWN, "County"])
dim(boston)
head(county.town)
sum(county.town[boston$TOWN, "Municipality"]!=boston$TOWN)
head(cbind(county.town[boston$TOWN, "Municipality"]!=boston$TOWN))
head(cbind(county.town[boston$TOWN, "Municipality"], boston$TOWN))
head(boston$TOWN)
boston <- cbind(COUNTY=county.town[as.character(boston$TOWN), "County"], boston)
head(boston)
as.character(boston$TOWN)
county.town[as.character(boston$TOWN), "County"]
boston$TOWN
county.town[as.character(boston$TOWN), "County"]
county.town["Chelsea", "County"]
county.town["Chelsea",]
county.town[county.town$Municipality="Chelsea"]
county.town[county.town$Municipality=="Chelsea", ]
rownames(county.town) <- county.town$Municipality
boston <- cbind(COUNTY=county.town[as.character(boston$TOWN), "County"], boston)
head(boston)
boston$COUNTY <- NULL
head(boston)
boston$COUNTY <- NULL
boston$COUNTY <- NULL
boston$COUNTY <- NULL
head(boston)
dim(boston)
boston <- read.csv("data/boston_rev.csv")
head(boston)
boston$COUNTY <- NULL
boston$TRACT <- as.factor(boston$TRACT)
boston$CHAS <- as.factor(boston$CHAS)
county.town <- read.csv("../CourseProject/data/ma_municipalities.csv", stringsAsFactors=FALSE)
rownames(county.town) <- county.town$Municipality
boston <- cbind(COUNTY=county.town[as.character(boston$TOWN), "County"], boston)
head(boston)
for (i in 1:nrow(boston)){
code <- geocode(paste(boston[i, "TOWN"], boston[i, "COUNTY"], "MA", sep=", "))
boston[i, "LON"] <- code[1, 1]
boston[i, "LAT"] <- code[1, 2]
}
head(boston)
write.csv(boston, "boston_rev.csv", row.names=FALSE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
table(boston$TOWN)
table(boston$COUNTY)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
table(boston$County)
table(boston$COUNTY)
unique(boston$COUNTY[boston$TOWN=="Essex"])
shiny::runApp()
unique(boston$COUNTY[as.acharacter(boston$TOWN)=="Essex"])
unique(boston$COUNTY[as.character(boston$TOWN)=="Essex"])
unique(boston$TOWN[as.character(boston$COUNTY)=="Essex"])
boston <- read.csv("data/boston_rev.csv", stringsAsFactors=FALSE)
boston$TRACT <- as.factor(boston$TRACT)
boston$CHAS <- as.factor(boston$CHAS)
lm.model <- lm(MEDV ~ TOWN + CHAS + RM + AGE, data=boston)
predict(lm.model, newdata=data.frame(TOWN="Marblehead", CHAS=factor(0), RM=3, AGE=20))  # Price = USD 9.47 k
str(boston)
shiny::runApp()
boston[is.na(boston$TOWN)]
boston[is.na(boston$TOWN),]
unique(boston$TOWN[boston$COUNTY=="Essex"])
boston$TOWN[boston$COUNTY=="Essex"]
sum(is.na(boston$COUNTY))
boston <- read.csv("data/boston_rev.csv", stringsAsFactors=FALSE)
boston$TRACT <- as.factor(boston$TRACT)
boston$CHAS <- as.factor(boston$CHAS)
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
shiny::runApp()
deployApp()
deployApp()
deployApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
plot(lm(MEDV ~ TOWN + CHAS + RM + AGE, data=boston))
par(mfrow=c(1,4))
plot(lm(MEDV ~ TOWN + CHAS + RM + AGE, data=boston))
boston <- read.csv("boston_rev.csv", stringsAsFactors=FALSE)
par(mfrow=c(1,4))
plot(lm(MEDV ~ TOWN + CHAS + RM + AGE, data=boston))
plot(boston$RM, boston$MEDV)
par(mfrow=c(1,2))
plot(boston$RM, boston$MEDV)
plot(boston$RM, boston$AGE)
plot(boston$AGE, boston$MEDV)
plot(boston$RM, boston$MEDV)
plot(boston$RM, boston$MEDV)
plot(boston$AGE, boston$MEDV)
source('C:/Users/Fan/R/DataSci/09. Developing Data Products/CourseProject/.RProfile')
